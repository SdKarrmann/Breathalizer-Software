/*
This file implements the methods declared in ADConverter.h.
*/

#include "ADConverter.h"

#define AD_REGISTER_0       ADCON0
#define CONVERSION_START    GO_nDONE
#define ACQUISITION_TIME     25

#define RADIX               10
#define ASCII_FOR_ZERO      '0'

#define _XTAL_FREQ          4000000

unsigned int GetAnalogInput(BYTE channelSelect)
{
    AD_REGISTER_0 = (channelSelect << 3) | 0x81; // 0100 0001, clock select and ON bit

	__delay_us(ACQUISITION_TIME);
	CONVERSION_START = 1;
	while(CONVERSION_START)
		;
	return (ADRESH << 2) | (ADRESL >> 6);
}

void IntToString(unsigned int value, char string[])
{
    unsigned int placeValue = 1;
    BYTE length = 0;
    while (value >= placeValue)
    {
		length++;
		placeValue *= 10;    
	}

	for(BYTE i = 0; i < length; i ++)
	{
        placeValue /= RADIX;
        BYTE currentDigit = (value % (RADIX * placeValue)) / placeValue;
		string[i] = currentDigit + ASCII_FOR_ZERO;
	}
}

void DecimalToString(unsigned int value, char string[], BYTE decPlaces)
{
	unsigned int placeValue = 1;
    BYTE length = 0;
    while (value >= placeValue)
    {
		length++;
		placeValue *= 10;    
	}

	for(BYTE i = 0; i < length; i ++)
	{
        placeValue /= RADIX;
        BYTE currentDigit = (value % (RADIX * placeValue)) / placeValue;
		string[i] = currentDigit + ASCII_FOR_ZERO;
	}
	
	if(length < decPlaces)
		decPlaces = length;	
	for(BYTE i = length - 1; i >= length - decPlaces; i--)
	{
 		string[i + 1] = string[i];
	}
	string[length - decPlaces] = '.';
}